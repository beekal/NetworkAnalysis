radioButtons('quote', 'Quote',
library(igraph)
dim(data)
data
#G<- graph.adjacency(data, mode = c("directed"))
data[1:2,1:2]
#D22 means data two by two only extracted from whole dataset
D22 <- data[1:2,1:2]
D22
#G<- graph.adjacency(D22, mode = c("undirected"))
library(igraph)
A <- matrix(c(0,1,1,0),2,2, byrow= TRUE)
A
D22
colnames(D22) = c("C","D")
D22
B <- as.matrix(D22,2,2,byrow = TRUE)
B
G<-graph.adjacency(B, mode=c("undirected"))
G<-graph.adjacency(A, mode=c("undirected"))
# now implementing for all data
DAll <- as.matrix(data,43,43,byrow=TRUE)
DAll
G<-graph.adjacency(DAll, mode=c("undirected"))
DtWithName <- DAll
DtWithName
colnames(DtWithName) = c("Nawaf Alhazmi","Ahmed Alnami","Saeed Alghamdi","Ahmed Alghamdi","Hamza Alghamdi","Abdul Aziz Alomari","Mohamed Atta","Ramzi Bin al-Shibh","Salem Alhazmi","Hani Hanjour","Yazid Sufaat","Walid Ba Attas","Khalid Almihdar","Majed Moqed","Nabil al - Marabh","Ahmed Al Haznaw","Raed Hijazi","Mohand Alsheri","Ziad Jarrah","Waleed Alshehri","Marwan Al-shehhi","Wail Alshehri","Satam Suqami","Fayez Ahmed","Said Bahaji","Zakariya Essabar","Mounir El Motassadeq","Mohamed Haydar Zammar","Mahmoun Darkazanli","Essid Sami","Abdelghani Mzoudi","Ahmed Khalil","Imad Eddin","Agus Budi man","Mustafa Ahmed al-Hisawi","Khalid Shaikh Mohammed","Zacarias Moussaoui","Faisal Al Salmi","Rayed Mohammed Abdullah","Fahad al Quso","Ahmed Al-Haha","Bandar Alhazmi","Mohamed Abdi")
DtWithName
G1<-graph.adjacency(DtWithName, mode=c("undirected"))
cent1<-data.frame(bet1=betweenness(G1),eig1=evcent(G1)$vector)
cent1
bet=as.vector(betweenness(G1))
normbet = (bet - mean(bet))/sd(bet)
hist(normbet)
eig=as.vector(evcent(G1)$vector)
normeig = (eig - mean(eig))/sd(eig)
hist(normeig)
cent2<-data.frame(normbet,normeig)
cent2
lm(normeig~normbet,data=cent2)
cor(normeig,normbet)
cor(normbet,normeig)
# V1 0.591 = 191.59*betcoef +intercept
# 0.591 = 191.59 * 0.00263 + 0.23 = (0.733) residual then is  -0.14
summary(as.vector(evcent(G1)$vector))
sd(as.vector(evcent(G1)$vector))
hist(as.vector(evcent(G1)$vector))
hist(as.vector(betweenness(G1)), bins =20)
plot(as.vector(evcent(G1)$vector))
plot(as.vector(betweenness(G1)), bins =20)
summary(as.vector(betweenness(G1)))
sd(as.vector(betweenness(G1)))
# library('Mass')
# install.packages('Mass')
bet1 = as.vector(betweenness(G1))
deg1 = as.vector(degree(G1))
normdeg = (deg1 - mean(deg1))/sd(deg1)
plot(normbet,normdeg)
betweenness(G1)
degree(G1)
summary(eig1)
lm(eig1~bet1,data=cent1)
# eig = 0.00263 * bet + 0.23 implies that there is very low relationship between the  betweenness and the eigen vector when it comes to terrorist network relation. this means that the more connected a terrorist is does not mean he is  connected to other critical nodes. He might in fact be just a gatekeeper i.e he sanitise the core of the network from the operational activities so that if a operational actor is compromised then it does not lead to compromise of the core networks. this increases the resilience of the terrorist networks i.e cell operations prevent one cells compromise from propagating to the whole network compromise. This means whatever comprimise happens at the operational level, the core is never compromised. Gatekeepers are important to break the operational strength of the network, while they do not compromise the true strategic strenght of the network.
#  A strategy must be devised keeping in mind the structure of the network. Identyfing  is not the  key, its a important event  but not the key. The key is maximising the knowledge to the fullest without letting the enemy know that their network has been compromised.Just as breaking the enigma was not the key. The key is then to using the information gained to the maximum full potential, without letting the enemy know that the  network has been compromised. You must be ready to   operational level, the terror network will be able to outlast.
# Correlating with the maoist network.
lm(eig1~bet1,data=cent1)$residuals
# Extremely large value of residuals indicate that the general assumption do not hold true for that particular instance and we can then look at why is the general assumption not holding true for that and wht is the factor that affects so. This might lead to comple new finding s as to in what case can we expect different result.
res1<-as.vector(lm(eig1~bet1,data=cent1)$residuals)
cent1<-transform(cent1,res=res1)
cent1
plot(G1, layout = layout.fruchterman.reingold)
plot(G1, layout = layout.fruchterman.reingold, vertex.size = 20*evcent(G1)$vector, vertex.label = as.vector(rownames(cent1)), main = 'Network Visualization in R')
# install.packages('network')
# install.packages('intergraph')
# install.packages('ggplot2')
# install.packages('statnet')
# install.packages('numDeriv')
# install.packages('yacca')
# install.packages('rgl')
# install.packages('coda')
# install.packages('rgl')
# install.packages('tnet')
# install.packages('RSiena')
# install.packages('rgl')
# install.packages('rgl')
# install.packages('rgl')
library('MASS')
library('statnet')
library('intergraph')
setwd("C:\\Users\\Lenovo B4400\\Google Drive\\0 Projects\\Terrorising the Terrorists\\Data\\")
getwd()
data <- read.csv("911 dataset As CSV-edit.csv",head=FALSE, sep = ",")
data
dim(data)
data[1,1]
data[,1]
EV <- eigen(data)
EV
EV$values[1:5]
library(igraph)
dim(data)
data
#G<- graph.adjacency(data, mode = c("directed"))
data[1:2,1:2]
#D22 means data two by two only extracted from whole dataset
D22 <- data[1:2,1:2]
D22
#G<- graph.adjacency(D22, mode = c("undirected"))
library(igraph)
A <- matrix(c(0,1,1,0),2,2, byrow= TRUE)
A
D22
colnames(D22) = c("C","D")
D22
B <- as.matrix(D22,2,2,byrow = TRUE)
B
G<-graph.adjacency(B, mode=c("undirected"))
G<-graph.adjacency(A, mode=c("undirected"))
# now implementing for all data
DAll <- as.matrix(data,43,43,byrow=TRUE)
DAll
G<-graph.adjacency(DAll, mode=c("undirected"))
DtWithName <- DAll
DtWithName
colnames(DtWithName) = c("Nawaf Alhazmi","Ahmed Alnami","Saeed Alghamdi","Ahmed Alghamdi","Hamza Alghamdi","Abdul Aziz Alomari","Mohamed Atta","Ramzi Bin al-Shibh","Salem Alhazmi","Hani Hanjour","Yazid Sufaat","Walid Ba Attas","Khalid Almihdar","Majed Moqed","Nabil al - Marabh","Ahmed Al Haznaw","Raed Hijazi","Mohand Alsheri","Ziad Jarrah","Waleed Alshehri","Marwan Al-shehhi","Wail Alshehri","Satam Suqami","Fayez Ahmed","Said Bahaji","Zakariya Essabar","Mounir El Motassadeq","Mohamed Haydar Zammar","Mahmoun Darkazanli","Essid Sami","Abdelghani Mzoudi","Ahmed Khalil","Imad Eddin","Agus Budi man","Mustafa Ahmed al-Hisawi","Khalid Shaikh Mohammed","Zacarias Moussaoui","Faisal Al Salmi","Rayed Mohammed Abdullah","Fahad al Quso","Ahmed Al-Haha","Bandar Alhazmi","Mohamed Abdi")
DtWithName
G1<-graph.adjacency(DtWithName, mode=c("undirected"))
cent1<-data.frame(bet1=betweenness(G1),eig1=evcent(G1)$vector)
cent1
bet=as.vector(betweenness(G1))
normbet = (bet - mean(bet))/sd(bet)
hist(normbet)
eig=as.vector(evcent(G1)$vector)
normeig = (eig - mean(eig))/sd(eig)
hist(normeig)
cent2<-data.frame(normbet,normeig)
cent2
lm(normeig~normbet,data=cent2)
cor(normeig,normbet)
cor(normbet,normeig)
# V1 0.591 = 191.59*betcoef +intercept
# 0.591 = 191.59 * 0.00263 + 0.23 = (0.733) residual then is  -0.14
summary(as.vector(evcent(G1)$vector))
sd(as.vector(evcent(G1)$vector))
hist(as.vector(evcent(G1)$vector))
hist(as.vector(betweenness(G1)), bins =20)
plot(as.vector(evcent(G1)$vector))
plot(as.vector(betweenness(G1)), bins =20)
summary(as.vector(betweenness(G1)))
sd(as.vector(betweenness(G1)))
# library('Mass')
# install.packages('Mass')
bet1 = as.vector(betweenness(G1))
deg1 = as.vector(degree(G1))
normdeg = (deg1 - mean(deg1))/sd(deg1)
plot(normbet,normdeg)
betweenness(G1)
degree(G1)
summary(eig1)
lm(eig1~bet1,data=cent1)
# eig = 0.00263 * bet + 0.23 implies that there is very low relationship between the  betweenness and the eigen vector when it comes to terrorist network relation. this means that the more connected a terrorist is does not mean he is  connected to other critical nodes. He might in fact be just a gatekeeper i.e he sanitise the core of the network from the operational activities so that if a operational actor is compromised then it does not lead to compromise of the core networks. this increases the resilience of the terrorist networks i.e cell operations prevent one cells compromise from propagating to the whole network compromise. This means whatever comprimise happens at the operational level, the core is never compromised. Gatekeepers are important to break the operational strength of the network, while they do not compromise the true strategic strenght of the network.
#  A strategy must be devised keeping in mind the structure of the network. Identyfing  is not the  key, its a important event  but not the key. The key is maximising the knowledge to the fullest without letting the enemy know that their network has been compromised.Just as breaking the enigma was not the key. The key is then to using the information gained to the maximum full potential, without letting the enemy know that the  network has been compromised. You must be ready to   operational level, the terror network will be able to outlast.
# Correlating with the maoist network.
lm(eig1~bet1,data=cent1)$residuals
# Extremely large value of residuals indicate that the general assumption do not hold true for that particular instance and we can then look at why is the general assumption not holding true for that and wht is the factor that affects so. This might lead to comple new finding s as to in what case can we expect different result.
res1<-as.vector(lm(eig1~bet1,data=cent1)$residuals)
cent1<-transform(cent1,res=res1)
cent1
plot(G1, layout = layout.fruchterman.reingold)
plot(G1, layout = layout.fruchterman.reingold, vertex.size = 20*evcent(G1)$vector, vertex.label = as.vector(rownames(cent1)), main = 'Network Visualization in R')
plot(G1, layout = layout.fruchterman.reingold)
G4<-graph.adjacency(RGU, mode=c("undirected"))
RGU<-rgraph(10, mode = "graph")
set.seed(1234)
RGU<-rgraph(10, mode = "graph")
G4<-graph.adjacency(RGU, mode=c("undirected"))
tkplot(G4)
triad.classify(G1,tri=c(1,2,4), mode = "graph")
RGU
triad.classify(DtWithName,tri=c(1,2,4), mode = "graph")
DtwithName
DtWithName
triad.classify(DtWithName,tri=c(3,2,4), mode = "graph")
triad.classify(DtWithName,tri=c(2,3,4), mode = "graph")
DtwithName
DtWithName
DtWithName['Nawaf Alhazmi']
DtWithName[,'Nawaf Alhazmi']
triad.classify(DtWithName,tri=c('Nawaf Alhazmi',3,4), mode = "graph")
summary(DtWithName[,'Nawaf Alhazmi'])
table(DtWithName[,'Nawaf Alhazmi'])
DtWithName
getIndex(DtWithName[,'Mohamed Abdi'])
getINDEX(DtWithName[,'Mohamed Abdi'])
getINDEX( DtWithName, value = 'Mohamed Abdi')
which( DtWithName, value = 'Mohamed Abdi')
which( DtWithName == 'Mohamed Abdi')
DtWithName[1,1]
colnames(DtWithName[1,1])
colnames(DtWithName)
which(colnames(DtWithName) == 'Mohamed Abdi')
dyad.census(rgraph(15,5,tprob=c(0.1,0.25,0.5,0.75,0.9)))
